---
import EditRoadmapForm from "../_components/EditRoadmapForm.astro";
import Layout from "../_Layout.astro";
import ToastAlert from "@components/ToastAlert.astro";
import { api } from "src/consts";
import { resourceNotFound } from "../_consts.ts"
const { cookies, url: { searchParams } } = Astro;
const key = cookies.get("access_token");
const id = searchParams.get("id");

if (!id) return Astro.redirect('/dashboard')

const getRoadmap = await api("roadmaps")(id)({
  method: "GET",
  headers: {
    Authorization: "Bearer " + key?.value,
  },
});

---

<Layout buttonContent="Ver Roadmaps" buttonUrl="/dashboard/roadmaps">
  <section class="create-roadmap">
    
    <h2 class="title-secundary action-title">{getRoadmap ? "Editar Roadmap": resourceNotFound(id) }</h2>
    { getRoadmap &&
      <EditRoadmapForm formId="create-roadmap"  {...getRoadmap}/>
      <ToastAlert />
    }
  </section>
</Layout>

<script>
  import ToastNotification from "@utils/toastAlerts.controller";
  import { api } from "src/consts";

  const form = document.querySelector("#create-roadmap") as HTMLFormElement;
  const roadmapID = new URLSearchParams(window.location.search).get("id") as string;

  const courseForm = document.querySelector(
    "#course-selector"
  ) as HTMLFormElement;
  const coursesList = document.querySelector(".courses-list") as HTMLDivElement;
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const data = e.target as HTMLFormElement;

    const formdata = new FormData(data);
    const dataObject = Object.fromEntries(formdata.entries());

    try {
      const response = await api("roadmaps")(roadmapID)({
        method: "PUT",
        body: JSON.stringify(dataObject),
        credentials: "include",
      });
      if (response) {
        form.reset();
        console.log("Roadmap creado exitosamente:", response.data);
        ToastNotification("Roadmap creado exitosamente", "success");
      }
    } catch (error) {
      console.error("Error:", error);
      ToastNotification("Se produjo un error al crear el roadmap", "error")
    }
  });

  courseForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const selectedData = e.target as HTMLFormElement;
    const formDataObject = new FormData(selectedData);

    const courseSelected = formDataObject.get("course") as string;

    const [id, name] = courseSelected.split("-|-");
    let courses = document.querySelector(
      "#courses-relation"
    ) as HTMLInputElement;
    const coursesData = JSON.parse(courses.value);

    if (isNaN(parseInt(id))) return;
    const courseExists = coursesData.find(
      (courseId: number) => courseId === parseInt(id)
    );
    if (courseExists) return;
    coursesData.push(parseInt(id));
    courses.value = JSON.stringify(coursesData);

    // Crear el web component
    const courseItem = document.createElement('course-item');
    courseItem.setAttribute('course-name', name);
    courseItem.setAttribute('course-id', id);

    coursesList.appendChild(courseItem);
  });

  // Manejar la eliminaciÃ³n de cursos
  coursesList?.addEventListener('course-remove', (e) => {
    const customEvent = e as CustomEvent;
    const { courseId } = customEvent.detail;
    let courses = document.querySelector("#courses-relation") as HTMLInputElement;
    const coursesData = JSON.parse(courses.value);

    // Remover el curso del array
    const updatedCourses = coursesData.filter((id: number) => id !== parseInt(courseId));
    courses.value = JSON.stringify(updatedCourses);

    console.log('Curso removido:', courseId);
  });
</script>

<style>
  .create-roadmap {
    display: flex;
    flex-direction: column;
    gap: 3rem;
    width: 100%;
    max-width: 40vw;
  }


</style>

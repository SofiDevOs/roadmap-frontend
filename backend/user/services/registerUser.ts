import bcrypt from "bcrypt";
import type { User } from "../models/UserModel";
import { UserRepository } from "../repositories/userRepository";
import  { UserResponse } from "../models/UserResponse";


/*
bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {
    // Store hash in your password DB.
});
*/


export class createUserService {

  constructor(private readonly repository: UserRepository) {}

  async execute(user: User): Promise<UserResponse> {
    if(user.password.length < 6) {
      throw new Error("Password must be at least 6 characters long");
    }
    if(!user.id) throw new Error("User ID should not be provided, it will be generated by the system");

    const userExists = await this.repository.findByEmail(user.email)

    if(userExists) throw new Error("Email...")


    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(user.password, salt);

    const userWithPasswordHashed: User = {
      ...user,
      password: hash
    }
    await this.repository.create(userWithPasswordHashed);
    console.log("User created successfully", user);
    return new UserResponse(user.id, user.username, user.email, user.fullname);
  }
}
